import os
import numpy as np
import healpy as hp
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from scipy.constants import h as h_planck, c, k, physical_constants
from astropy.io import fits

NSIDE = 512
sigma_beam = 0.005
origin = np.array([0.0, 0.0, 0.0])
base_input = "##################"
latin_hypercube_file = "latin_hypercube_params.txt"
output_base = "##################"
z = 1

shell_start = 0.0
shell_end = 1000.0
shell_thickness = 30.0
shell_edges = np.arange(shell_start, shell_end, shell_thickness)

Y_p = 0.24
alpha = 0.09
beta = -0.58
v_c0 = 10**1.56
Msun_to_kg = 1.988e30
Mpc_to_m = 3.086e22
A10 = 2.869e-15
f21 = 1.4204065e9
m_p = physical_constants['proton mass'][0]
k_b = k

os.makedirs(os.path.join(output_base, "brightness_temp"), exist_ok=True)
os.makedirs(os.path.join(output_base, "fits"), exist_ok=True)


def v_circ(M, z, Omega_m):
    factor = (200 * Omega_m / 24.4)**(1 / 6)
    return 96.6 * factor * (((1 + z) / 3.3)**0.5) * (M / 1e11)**(1 / 3)

def M_HI(M, z, Omega_m, f_H_c):
    return alpha * f_H_c * M * (M / 1e11)**beta * np.exp(-(v_c0 / v_circ(M, z, Omega_m))**3)


def load_latin_hypercube_params(filepath):
    try:
        return np.loadtxt(filepath, comments="#")  # skip comment lines
    except Exception as e:
        print(f"Error loading Latin hypercube params: {e}")
        return None


latin_data = np.loadtxt(latin_hypercube_file, comments="#", dtype=np.float64)

all_folders = sorted([
    f for f in os.listdir(base_input)
    if f.isdigit() and 601 <= int(f) <= 780 
], key=int)


for folder in all_folders:
    halo_file = os.path.join(base_input, folder, "halos2.txt")
    if not os.path.exists(halo_file):
        continue
    print(f"\nProcessing sim {folder}")

    try:
        folder_num = int(folder)
        param_index = folder_num


        if param_index >= latin_data.shape[0]:
            print(f"Skipping {folder}: param index {param_index} out of bounds.")
            continue

        Omega_m, Omega_b, h, n_s, sigma_8 = latin_data[param_index]
        Omega_L = 1 - Omega_m
        f_H_c = (1 - Y_p) * Omega_b / Omega_m
        H0 = 100 * h
        Hz = H0 * 1e3 / Mpc_to_m * np.sqrt(Omega_m * (1 + z)**3 + Omega_L)
        Tb_pre = (3 * h_planck * c**3 * A10) / (32 * np.pi * k_b * f21**2 * m_p)

        data = np.loadtxt(halo_file, skiprows=6)
        pos = data[:, 1:4] / h
        mass = data[:, 7] / h
        r = np.linalg.norm(pos, axis=1)

        for shell_in in shell_edges:
            shell_out = shell_in + shell_thickness
            shell_mask = (r >= shell_in) & (r < shell_out)
            if np.sum(shell_mask) == 0:
                continue

            pos_shell = pos[shell_mask]
            mass_shell = mass[shell_mask]
            M_HI_vals = M_HI(mass_shell, z, Omega_m, f_H_c)

            x, y, zc = pos_shell.T
            theta = np.arccos(zc / np.linalg.norm(pos_shell, axis=1))
            phi = np.arctan2(y, x)
            phi = np.where(phi < 0, phi + 2 * np.pi, phi)

            pix = hp.ang2pix(NSIDE, theta, phi)
            Npix = hp.nside2npix(NSIDE)
            mass_map = np.bincount(pix, weights=M_HI_vals, minlength=Npix)

            r_comoving = shell_in + shell_thickness / 2
            r_m = r_comoving * Mpc_to_m
            vol_pix = (4 * np.pi * r_m**2 * (shell_thickness * Mpc_to_m)) / ((1 + z)**3 * Npix)


            mass_map_kg = mass_map * Msun_to_kg
            rho_HI = mass_map_kg / vol_pix


            Tb = Tb_pre * ((1 + z)**2 / Hz) * rho_HI* 1e3
            Tb_smooth = hp.smoothing(Tb, sigma=sigma_beam)
            Tb_logsafe = np.where(Tb_smooth < 5e-4, 5e-4, Tb_smooth)

            plot_dir = os.path.join(output_base, "brightness_temp", folder)
            fits_dir = os.path.join(output_base, "fits", folder)
            os.makedirs(plot_dir, exist_ok=True)
            os.makedirs(fits_dir, exist_ok=True)

            plot_name = f"Tb_shell{int(shell_in)}_{int(shell_out)}.png"
            fits_name = f"Tb_shell{int(shell_in)}_{int(shell_out)}.fits"
            
            title = f"T_b log (shell {shell_in:.0f}-{shell_out:.0f}) | Omega_m={Omega_m:.18f}, Omega_b={Omega_b:.18f}, h={h:.18f}, z={z:.1f}"
            hp.mollview(Tb_logsafe, cbar=False, title=title,
                        unit='mK', cmap='plasma', min=5e-4, max=1e-2)

            fig = plt.gcf()
            ax = plt.gca()
            image = ax.get_images()[0]
            image.set_norm(LogNorm(vmin=5e-4, vmax=1e-2))
            cbar = fig.colorbar(image, ax=ax, orientation='horizontal', pad=0.05, fraction=0.05)
            cbar.set_label("Brightness Temperature [mK] (log scale)")



            plt.savefig(os.path.join(plot_dir, plot_name))
            plt.clf()
            plt.close()
            shell_name = f"Tb_shell{int(shell_in)}_{int(shell_out)}"
            fits_path = os.path.join(fits_dir, f"{shell_name}.fits")
            hp.write_map(fits_path, Tb, overwrite=True)
            
    except Exception as e:
        print(f"Error in sim {folder}: {e}")

