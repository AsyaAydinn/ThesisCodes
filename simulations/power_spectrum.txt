import os
import numpy as np
import healpy as hp
import json
import pymaster as nmt
import matplotlib.pyplot as plt

NSIDE = 512
bin_width = 6


input_root = "#####/simulations/fits"
output_root = "#####/simulations/power_spectrum"
os.makedirs(output_root, exist_ok=True)


for folder_num in range(0, 2000):
    folder_path = os.path.join(input_root, str(folder_num))
    if not os.path.isdir(folder_path):
        continue

    fits_files = sorted([f for f in os.listdir(folder_path) if f.endswith(".fits") and "mask" not in f])

    for fits_name in fits_files:
        shell_name = fits_name.replace(".fits", "")
        print(f"\nProcessing sim {folder_num}, shell {shell_name}")

        try:
            # Paths
            fits_path = os.path.join(folder_path, f"{shell_name}.fits")
            mask_path = os.path.join(folder_path, f"{shell_name}_mask.fits")
            meta_path = os.path.join(folder_path, f"{shell_name}_meta.json")

            sim_output_folder = os.path.join(output_root, str(folder_num))
            os.makedirs(sim_output_folder, exist_ok=True)

            cl_save_path = os.path.join(sim_output_folder, f"{shell_name}_Cl.npy")
            cl_plot_path = os.path.join(sim_output_folder, f"{shell_name}_Cl.png")



            Tb_map = hp.read_map(fits_path, field=0, verbose=False)   
            DTb_map = hp.read_map(fits_path, field=1, verbose=False) 
        
            patch_mask = hp.read_map(mask_path, verbose=False).astype(bool)
            DTb_map[~patch_mask] = 0.0
            with open(meta_path, "r") as f:
                metadata = json.load(f)

            mass_var_M_HI = metadata["mass_var_M_HI"]
            mass_mean_M_HI = metadata["mass_mean_M_HI"]
            mass_mean = metadata["mass_mean"]
            mass_var = metadata["mass_var"]
            N_halos = metadata["N_halos"]
            mean_Tb  = metadata["mean_Tb"]
            f_sky   = metadata["f_sky"]

            mean_w2 = mass_var_M_HI +mass_mean_M_HI**2
            Cshot_delta = 4*np.pi * f_sky / N_halos * (mean_w2 / mass_mean_M_HI**2) 
            mask = hp.read_map(mask_path, verbose=False).astype(bool)
            mask_apo = nmt.mask_apodization(mask.astype(float), aposize=1.0, apotype="C1") 
        
            Npix = hp.nside2npix(NSIDE)
            Omega_pix = 4 * np.pi / Npix


            field = nmt.NmtField(mask_apo, [DTb_map], lmax=1024)
            l_min = 5
            bin_width = 6
            l_max = 1024
            ell_edges = np.arange(l_min, l_max + bin_width, bin_width)


            binning = nmt.NmtBin.from_edges(ell_edges[:-1], ell_edges[1:])

            workspace = nmt.NmtWorkspace()
            workspace.compute_coupling_matrix(field, field, binning)

            Cl_decoupled = workspace.decouple_cell(nmt.compute_coupled_cell(field, field))[0]
            ell_binned = binning.get_effective_ells()
   
            Wl = hp.pixwin(NSIDE, lmax=l_max)
            win_binned = binning.bin_cell(Wl**2)[0]
            win_binned = np.where(win_binned > 1e-12, win_binned, np.nan)
            Cl_total = Cl_decoupled / win_binned

            
            Cl_cluster = Cl_total - Cshot_delta

            np.save(os.path.join(sim_output_folder, f"{shell_name}_Cl_cluster.npy"), np.vstack((ell_binned, Cl_cluster)))    
            np.save(os.path.join(sim_output_folder, f"{shell_name}_Cl_total.npy"),   np.vstack((ell_binned, Cl_total)))
            
            new_metadata = {
                "original_meta_path": meta_path,
                "Cshot_delta": float(Cshot_delta),
                "Cl_lmin": int(l_min),
                "Cl_lmax": int(l_max),
                "bin_width": int(bin_width),
                "ell_binned": ell_binned.tolist(),
                "mass_var_M_HI": mass_var_M_HI,
                "mass_mean_M_HI": mass_mean_M_HI,
                "mass_mean": mass_mean,
                "mass_var": mass_var,
                "N_halos": N_halos,
                "mean_Tb": mean_Tb,
                "f_sky": f_sky,
            }


            meta_out_path = os.path.join(sim_output_folder, f"{shell_name}_Cl_meta.json")
            with open(meta_out_path, "w") as f:
                json.dump(new_metadata, f, indent=2, sort_keys=True)

            plt.figure(figsize=(8,6))
            plt.plot(ell_binned, Cl_cluster+ 1e-3, lw=1.5, label=f"sim{folder_num}_{shell_name}")
            plt.xscale("log")
            plt.yscale("log")
            plt.xlabel(r"Multipole $\ell$")
            plt.ylabel(r"$C_\ell$")
            plt.title(f"Power Spectrum: sim {folder_num}, {shell_name}")
            plt.grid(True, which="both")
            plt.legend()
            plt.tight_layout()
            plt.savefig(cl_plot_path)
            plt.close()

        except Exception as e:
            print(f"Error in sim {folder_num}, shell {shell_name}: {e}")
