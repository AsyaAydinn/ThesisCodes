import pymaster as nmt
N_halos   = len(mass_shell)
mean_w2 = mass_var_HI + mass_mean_HI**2  
sigma_beam = 0.000
Tb_smooth = hp.smoothing(Tb_fullsky, sigma=sigma_beam)
valid = (Tb_smooth != hp.UNSEEN) & np.isfinite(Tb_smooth) & patch_mask

mean_Tb = Tb_smooth[valid].mean()
delta_Tb_fullsky = np.full(Npix, hp.UNSEEN)
delta_Tb_fullsky[valid] = (Tb_smooth[valid] - mean_Tb) / mean_Tb

delta_Tb_map = hp.ma(delta_Tb_fullsky)
delta_Tb_map.mask = ~patch_mask  # this defines what's masked out
mask_apo = nmt.mask_apodization(patch_mask.astype(float), aposize=1.0, apotype="C1") 
Cshot_delta = 4*np.pi * f_sky / N_halos * (mean_w2 / mass_mean_HI**2)

field = nmt.NmtField(mask_apo, [delta_Tb_map], lmax=1024)


l_min = 5
l_max = 1024
bin_width = 6
ell_edges = np.arange(l_min, l_max + bin_width, bin_width)
binning = nmt.NmtBin.from_edges(ell_edges[:-1], ell_edges[1:])
workspace = nmt.NmtWorkspace()
workspace.compute_coupling_matrix(field, field, binning)


Cl_decoupled = workspace.decouple_cell(nmt.compute_coupled_cell(field, field))[0]
ell_binned = binning.get_effective_ells()
Wl = hp.pixwin(NSIDE, lmax=l_max)
win_binned = binning.bin_cell(Wl**2)[0]

win_binned = np.where(win_binned > 1e-12, win_binned, np.nan)
Cl_total = Cl_decoupled / win_binned


Cl_cluster = Cl_total - Cshot_delta



plt.figure(figsize=(8, 6))
plt.plot(ell_binned,  Cl_total,
         lw=1.5, label="  Cl_total" )
plt.loglog(ell_binned,   Cl_cluster+1e-3 ,
         lw=1.5, label="Cl_cluster + 1e-3" )
plt.yscale('log')
plt.xlabel(r"Multipole $\ell$")
plt.ylabel(r"$C_\ell$")
plt.title("Brightness Temperature Power delt Tb ")
plt.grid(True, which="both")
plt.legend()
plt.tight_layout()
plt.show()
